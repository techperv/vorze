From 10957cf8ae1b12879feb8c41bf420822b146ebf7 Mon Sep 17 00:00:00 2001
From: Crewmen <crewmen@sigaint.org>
Date: Mon, 26 May 2015 00:18:02 +0000
Subject: [PATCH 1/2] Porting udp_sync from MPlayer 1.

---
 Makefile      |   1 +
 cfg-mplayer.h |  10 +++
 mplayer.c     |  32 ++++++++
 udp_sync.c    | 246 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 udp_sync.h    |  38 +++++++++
 5 files changed, 327 insertions(+)
 create mode 100644 udp_sync.c
 create mode 100644 udp_sync.h

diff --git a/Makefile b/Makefile
index 56d50f7..d2202a9 100644
--- a/Makefile
+++ b/Makefile
@@ -120,6 +120,7 @@ SRCS_COMMON-$(NETWORKING)            += stream/asf_mmst_streaming.c \
                                         stream/tcp.c \
                                         stream/stream_rtp.c \
                                         stream/stream_udp.c \
+                                        udp_sync.c \
 
 SRCS_COMMON-$(PNG)                   += libmpcodecs/vd_mpng.c
 SRCS_COMMON-$(PRIORITY)              += osdep/priority.c
diff --git a/cfg-mplayer.h b/cfg-mplayer.h
index ff8868f..7b611e4 100644
--- a/cfg-mplayer.h
+++ b/cfg-mplayer.h
@@ -432,12 +432,22 @@ const m_option_t common_opts[] = {
 #else
     {"prefer-ipv6", "MPlayer was compiled without IPv6 support.\n", CONF_TYPE_PRINT, 0, 0, 0, NULL},
 #endif /* HAVE_AF_INET6 */
+    {"udp-slave", &udp_slave, CONF_TYPE_FLAG, 0, 0, 1, NULL},
+    {"udp-master", &udp_master, CONF_TYPE_FLAG, 0, 0, 1, NULL},
+    {"udp-ip", &udp_ip, CONF_TYPE_STRING, 0, 0, 1, NULL},
+    {"udp-port", &udp_port, CONF_TYPE_INT, 0, 1, 65535, NULL},
+    {"udp-seek-threshold", &udp_seek_threshold, CONF_TYPE_FLOAT, CONF_RANGE, 0.1, 100, NULL},
 
 #else
     {"user", "MPlayer was compiled without streaming (network) support.\n", CONF_TYPE_PRINT, CONF_NOCFG, 0, 0, NULL},
     {"passwd", "MPlayer was compiled without streaming (network) support.\n", CONF_TYPE_PRINT, CONF_NOCFG, 0, 0, NULL},
     {"bandwidth", "MPlayer was compiled without streaming (network) support.\n", CONF_TYPE_PRINT, CONF_NOCFG, 0, 0, NULL},
     {"user-agent", "MPlayer was compiled without streaming (network) support.\n", CONF_TYPE_PRINT, CONF_NOCFG, 0, 0, NULL},
+    {"udp-slave", "MPlayer was compiled without streaming (network) support.\n", CONF_TYPE_PRINT, CONF_NOCFG, 0, 0, NULL},
+    {"udp-master", "MPlayer was compiled without streaming (network) support.\n", CONF_TYPE_PRINT, CONF_NOCFG, 0, 0, NULL},
+    {"udp-ip", "MPlayer was compiled without streaming (network) support.\n", CONF_TYPE_PRINT, CONF_NOCFG, 0, 0, NULL},
+    {"udp-port", "MPlayer was compiled without streaming (network) support.\n", CONF_TYPE_PRINT, CONF_NOCFG, 0, 0, NULL},
+    {"udp-seek-threshold", "MPlayer was compiled without streaming (network) support.\n", CONF_TYPE_PRINT, CONF_NOCFG, 0, 0, NULL},
 #endif /* CONFIG_NETWORKING */
 
 
diff --git a/mplayer.c b/mplayer.c
index dab8535..14ac794 100644
--- a/mplayer.c
+++ b/mplayer.c
@@ -94,6 +94,8 @@
 #include "cpudetect.h"
 #include "version.h"
 
+#include "udp_sync.h"
+
 #ifdef CONFIG_X11
 #include "libvo/x11_common.h"
 #endif
@@ -669,6 +671,11 @@ void uninit_player(struct MPContext *mpctx, unsigned int mask)
 
 void exit_player_with_rc(struct MPContext *mpctx, enum exit_reason how, int rc)
 {
+#ifdef CONFIG_NETWORKING
+    if (udp_master)
+        send_udp(mpctx, udp_ip, udp_port, "bye");
+#endif /* CONFIG_NETWORKING */
+
     uninit_player(mpctx, INITIALIZED_ALL);
 #if defined(__MINGW32__) || defined(__CYGWIN__)
     timeEndPeriod(1);
@@ -2583,6 +2590,17 @@ static int fill_audio_out_buffers(struct MPContext *mpctx, double endpts)
     return -partial_fill;
 }
 
+static void handle_udp_master(struct MPContext *mpctx)
+{
+#ifdef CONFIG_NETWORKING
+    if (udp_master) {
+        char current_time[256];
+        snprintf(current_time, sizeof(current_time), "%f", mpctx->sh_video->pts);
+        send_udp(mpctx, udp_ip, udp_port, current_time);
+    }
+#endif /* CONFIG_NETWORKING */
+}
+
 int reinit_video_chain(struct MPContext *mpctx)
 {
     struct MPOpts *opts = &mpctx->opts;
@@ -3471,6 +3489,17 @@ static void run_playloop(struct MPContext *mpctx)
             }
         }
 
+#ifdef CONFIG_NETWORKING
+        if (udp_slave) {
+            int udp_master_exited = udp_slave_sync(mpctx);
+            if (udp_master_exited > 0) {
+                mp_msg(MSGT_CPLAYER, MSGL_INFO, "Option -udp-slave: exiting because master exited\n");
+                exit_player(mpctx, EXIT_QUIT);
+            } else if (udp_master_exited == 0)
+                goto flip_page;
+        }
+#endif /* CONFIG_NETWORKING */
+
         if (!video_left || (mpctx->paused && !mpctx->restart_playback))
             break;
         if (!vo->frame_loaded) {
@@ -3518,8 +3547,11 @@ static void run_playloop(struct MPContext *mpctx)
         }
         sleeptime = 0;
 
+        handle_udp_master(mpctx);
+
         //=================== FLIP PAGE (VIDEO BLT): ======================
 
+        flip_page:
         current_module = "flip_page";
         vo_new_frame_imminent(vo);
         struct sh_video *sh_video = mpctx->sh_video;
diff --git a/udp_sync.c b/udp_sync.c
new file mode 100644
index 0000000..0c4a518
--- /dev/null
+++ b/udp_sync.c
@@ -0,0 +1,246 @@
+/*
+ * Network playback synchronization
+ * Copyright (C) 2009 Google Inc.
+ *
+ * This file is part of MPlayer.
+ *
+ * MPlayer is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * MPlayer is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with MPlayer; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#define _BSD_SOURCE
+
+#include "config.h"
+
+#if !HAVE_WINSOCK2_H
+#include <errno.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+#include <stdlib.h>
+#include <sys/ioctl.h>
+#include <fcntl.h>
+#include <string.h>
+#include <strings.h>
+#include <netdb.h>
+#include <signal.h>
+#else
+#include <winsock2.h>
+#include <ws2tcpip.h>
+#endif /* HAVE_WINSOCK2_H */
+
+#include "mplayer.h"
+#include "mp_core.h"
+#include "libmpdemux/stheader.h"
+#include "mp_msg.h"
+#include "udp_sync.h"
+#include "osdep/timer.h"
+#include "libavutil/common.h"
+
+
+// config options for UDP sync
+int udp_master = 0;
+int udp_slave  = 0;
+int udp_port   = 23867;
+const char *udp_ip = "127.0.0.1"; // where the master sends datagrams
+                                  // (can be a broadcast address)
+float udp_seek_threshold = 1.0;   // how far off before we seek
+
+// how far off is still considered equal
+#define UDP_TIMING_TOLERANCE 0.02
+
+static void startup(void)
+{
+#if HAVE_WINSOCK2_H
+    static int wsa_started;
+    if (!wsa_started) {
+        WSADATA wd;
+        WSAStartup(0x0202, &wd);
+        wsa_started = 1;
+    }
+#endif
+}
+
+static void set_blocking(int fd, int blocking)
+{
+    long sock_flags;
+#if HAVE_WINSOCK2_H
+    sock_flags = !blocking;
+    ioctlsocket(fd, FIONBIO, &sock_flags);
+#else
+    sock_flags = fcntl(fd, F_GETFL, 0);
+    sock_flags = blocking ? sock_flags & ~O_NONBLOCK : sock_flags | O_NONBLOCK;
+    fcntl(fd, F_SETFL, sock_flags);
+#endif /* HAVE_WINSOCK2_H */
+}
+
+// gets a datagram from the master with or without blocking.  updates
+// master_position if successful.  if the master has exited, returns 1.
+// returns -1 on error or if no message received.
+// otherwise, returns 0.
+static int get_udp(int blocking, double *master_position)
+{
+    char mesg[100];
+
+    int chars_received = -1;
+    int n;
+
+    static int sockfd = -1;
+    if (sockfd == -1) {
+#if HAVE_WINSOCK2_H
+        DWORD tv = 30000;
+#else
+        struct timeval tv = { .tv_sec = 30 };
+#endif
+        struct sockaddr_in servaddr = { 0 };
+
+        startup();
+        sockfd = socket(AF_INET, SOCK_DGRAM, 0);
+        if (sockfd == -1)
+            return -1;
+
+        servaddr.sin_family      = AF_INET;
+        servaddr.sin_addr.s_addr = htonl(INADDR_ANY);
+        servaddr.sin_port        = htons(udp_port);
+        bind(sockfd, (struct sockaddr *)&servaddr, sizeof(servaddr));
+
+        setsockopt(sockfd, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
+
+    }
+
+    set_blocking(sockfd, blocking);
+
+    while (-1 != (n = recvfrom(sockfd, mesg, sizeof(mesg)-1, 0,
+                               NULL, NULL))) {
+        char *end;
+        // flush out any further messages so we don't get behind
+        if (chars_received == -1)
+            set_blocking(sockfd, 0);
+
+        chars_received = n;
+        mesg[chars_received] = 0;
+        if (strcmp(mesg, "bye") == 0)
+            return 1;
+        *master_position = strtod(mesg, &end);
+        if (*end) {
+            mp_msg(MSGT_CPLAYER, MSGL_WARN, "Could not parse udp string!\n");
+            return -1;
+        }
+    }
+    if (chars_received == -1)
+        return -1;
+
+    return 0;
+}
+
+void send_udp(struct MPContext *mpctx, const char *send_to_ip, int port, char *mesg)
+{
+    static int sockfd = -1;
+    static struct sockaddr_in socketinfo;
+
+    if (sockfd == -1) {
+        static const int one = 1;
+        int ip_valid = 0;
+
+        startup();
+        sockfd = socket(AF_INET, SOCK_DGRAM, 0);
+        if (sockfd == -1)
+            exit_player_with_rc(mpctx, EXIT_ERROR, 1);
+
+        // Enable broadcast
+        setsockopt(sockfd, SOL_SOCKET, SO_BROADCAST, &one, sizeof(one));
+
+#if HAVE_WINSOCK2_H
+        socketinfo.sin_addr.s_addr = inet_addr(send_to_ip);
+        ip_valid = socketinfo.sin_addr.s_addr != INADDR_NONE;
+#else
+        ip_valid = inet_aton(send_to_ip, &socketinfo.sin_addr);
+#endif
+
+        if (!ip_valid) {
+            mp_msg(MSGT_CPLAYER, MSGL_FATAL, "Option -udp-ip: invalid IP address\n");
+            exit_player_with_rc(mpctx, EXIT_ERROR, 1);
+        }
+
+        socketinfo.sin_family = AF_INET;
+        socketinfo.sin_port   = htons(port);
+    }
+
+    sendto(sockfd, mesg, strlen(mesg), 0, (struct sockaddr *) &socketinfo,
+           sizeof(socketinfo));
+}
+
+// this function makes sure we stay as close as possible to the master's
+// position.  returns 1 if the master tells us to exit,
+// -1 on error and normal timing should be used again, 0 otherwise.
+int udp_slave_sync(struct MPContext *mpctx)
+{
+    // remember where the master is in the file
+    static double udp_master_position;
+    // whether we timed out before waiting for a master message
+    static int timed_out = -1;
+    // last time we received a valid master message
+    static unsigned last_success;
+    int master_exited;
+
+    if (timed_out < 0) {
+        // initialize
+        udp_master_position = mpctx->sh_video->pts - udp_seek_threshold / 2;
+        timed_out = 0;
+        last_success = GetTimerMS();
+    }
+
+    // grab any waiting datagrams without blocking
+    master_exited = get_udp(0, &udp_master_position);
+
+    while (!master_exited || (!timed_out && master_exited < 0)) {
+        double my_position = mpctx->sh_video->pts;
+
+        // if we're way off, seek to catch up
+        if (FFABS(my_position - udp_master_position) > udp_seek_threshold) {
+            queue_seek(mpctx, MPSEEK_ABSOLUTE, udp_master_position, 1);
+            break;
+        }
+
+        // normally we expect that the master will have just played the
+        // frame we're ready to play.  break out and play it, and we'll be
+        // right in sync.
+        // or, the master might be up to a few seconds ahead of us, in
+        // which case we also want to play the current frame immediately,
+        // without waiting.
+        // UDP_TIMING_TOLERANCE is a small value that lets us consider
+        // the master equal to us even if it's very slightly ahead.
+        if (udp_master_position + UDP_TIMING_TOLERANCE > my_position)
+            break;
+
+        // the remaining case is that we're slightly ahead of the master.
+        // usually, it just means we called get_udp() before the datagram
+        // arrived.  call get_udp again, but this time block until we receive
+        // a datagram.
+        master_exited = get_udp(1, &udp_master_position);
+        if (master_exited < 0)
+            timed_out = 1;
+    }
+
+    if (master_exited >= 0) {
+        last_success = GetTimerMS();
+        timed_out = 0;
+    } else {
+        master_exited = 0;
+        timed_out |= GetTimerMS() - last_success > 30000;
+    }
+
+    return timed_out ? -1 : master_exited;
+}
diff --git a/udp_sync.h b/udp_sync.h
new file mode 100644
index 0000000..9a1e25a
--- /dev/null
+++ b/udp_sync.h
@@ -0,0 +1,38 @@
+/*
+ * Network playback synchronization
+ * Copyright (C) 2009 Google Inc.
+ *
+ * This file is part of MPlayer.
+ *
+ * MPlayer is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * MPlayer is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with MPlayer; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#ifndef MPLAYER_UDP_SYNC_H
+#define MPLAYER_UDP_SYNC_H
+
+#include "mp_core.h"
+
+// config options for UDP sync
+extern int udp_master;
+extern int udp_slave;
+extern int udp_port;
+extern const char *udp_ip; // where the master sends datagrams
+                           // (can be a broadcast address)
+extern float udp_seek_threshold; // how far off before we seek
+
+void send_udp(struct MPContext *mpctx, const char *send_to_ip, int port, char *mesg);
+int udp_slave_sync(MPContext *mpctx);
+
+#endif /* MPLAYER_UDP_SYNC_H */
-- 
1.9.1

